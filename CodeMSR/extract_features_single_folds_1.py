import time
import sys
import pandas as pd
import numpy as np
# import database as db
from collections import Counter


def filter_code(vuln_code):
    code_lines = []

    for code_line in vuln_code:
        if '//' in code_line:
            code_line = code_line[:code_line.find('//')]
        elif '/*' in code_line and '*/' in code_line:
            start_comment_index = code_line.find('/*')
            end_comment_index = code_line.find('*/')

            code_line = code_line[:start_comment_index] + code_line[end_comment_index + 2:]

        code_lines.append(code_line)

    return '\n'.join(code_lines)


def extract_clean_code(row, granularity='file', output='code'):
    # Output options: code, context and all (code + context)
    if granularity == 'file':
        code = np.asarray(row['code_before'].splitlines())

        if output == 'code':
            code_lines = np.asarray(list(set(row['vuln_lines']) - set(row['noisy_lines']))) - 1
        elif output == 'context':
            code_lines = np.asarray(
                list(set(list(range(1, len(code) + 1))) - set(row['noisy_lines']) - set(row['vuln_lines']))) - 1
        elif output == 'all':
            code_lines = np.asarray(list(set(list(range(1, len(code) + 1))) - set(row['noisy_lines']))) - 1
    elif granularity == 'method':
        code = np.asarray(row['code'].splitlines())
        start_line = int(row['start_line'])

        if output == 'code':
            code_lines = np.asarray(list(set(row['method_vuln_lines']) - set(row['noisy_lines']))) - start_line
        elif output == 'context':
            method_lines = np.asarray(list(range(len(code)))) + start_line
            method_lines = method_lines.tolist()
            code_lines = np.asarray(
                list(set(method_lines) - set(row['noisy_lines']) - set(row['method_vuln_lines']))) - start_line
        elif output == 'all':
            method_lines = np.asarray(list(range(len(code)))) + start_line
            method_lines = method_lines.tolist()
            code_lines = np.asarray(
                list(set(method_lines) - set(row['noisy_lines']))) - start_line

    if len(code_lines) == 0:
        return ''

    code = code[code_lines]

    return filter_code(code)


def create_fold(df, key, folds):
    sizes = []
    fold_sum = 0

    if type(folds) is list:

        for i in range(len(folds)):
            if i == len(folds) - 1:
                sizes.append(len(df) - 1)
            else:
                sizes.append(int(len(df) * folds[i]) + fold_sum)
                fold_sum += int(len(df) * folds[i])
    else:
        size_per_fold = int(len(df) / folds)

        for i in range(folds):
            if i == folds - 1:
                sizes.append(len(df) - 1)
            else:
                sizes.append(size_per_fold + fold_sum)
                fold_sum += size_per_fold

    tmp_df = df.copy()
    tmp_df['row_index'] = list(range(len(df)))
    tmp_df = tmp_df.rename(columns={key: 'key'})

    tmp_df['fold'] = 0

    for i, size in enumerate(sizes):

        if i == 0:
            start_index = 0
        else:
            start_index = sizes[i - 1] + 1

        end_index = size

        tmp_df.loc[(start_index <= tmp_df['row_index']) & (tmp_df['row_index'] <= end_index), 'fold'] = i

    fold_map = tmp_df[['key', 'fold']].copy()
    fold_map['key'] = fold_map['key'].astype(str)
    fold_map['fold'] = fold_map['fold'].astype(int)

    return fold_map


df_method = pd.read_csv('../DataMSR/msr-vul.csv')

n_folds = 1

method_map = create_fold(df_method, 'CVE ID', folds=n_folds)
method_map.to_csv('../DataMSR/method_map_folds_1.csv', index=False)

cvss_cols = [
    'confidentiality',
    'integrity',
    'availability',
    'access_vector',
    'access_complexity',
    'authentication',
    'severity'
]

# Whole method
selected_cols = ['CVE ID', 'func_before']
selected_cols.extend(cvss_cols)
df_tmp = df_method[selected_cols].copy()
# df_tmp['filtered_code'] = df_tmp[['code']].apply(
#     lambda r: extract_clean_code(r, 'method', 'all'), axis=1)
# df_tmp = df_tmp.drop(columns=['code', 'noisy_lines', 'start_line'])
df_tmp = df_tmp.rename(columns={'CVE ID': 'key', 'func_before': 'code'}).reset_index(drop=True)
print(len(df_tmp), df_tmp.columns)
df_tmp.to_csv('../DataMSR/method_whole_folds_1.csv', index=False)
